version: 0.2

env:
  secrets-manager:
    SONAR_SECRET: prod/sonar_x24104558

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      # Update and install basic tools
      - yum update -y
      - yum install -y jq unzip wget
      
      # Install Java 17 (Amazon Corretto) and set as default
      - yum install -y https://corretto.aws/downloads/latest/amazon-corretto-17-x64-linux-jdk.rpm
      - export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto.x86_64
      - export PATH=$JAVA_HOME/bin:$PATH
      
      # Verify Java installation
      - java -version
      
      # Install Python dependencies
      - pip install --upgrade pip
      - pip install -r requirements.txt pylint
      
      # Install SonarScanner (latest version)
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
      - unzip sonar-scanner-cli-4.7.0.2747-linux.zip
      - export PATH=$PATH:$PWD/sonar-scanner-4.7.0.2747-linux/bin
      
      # Force SonarScanner to use our Java 17 installation
      - sed -i 's/^exec java/exec \/usr\/lib\/jvm\/java-17-amazon-corretto.x86_64\/bin\/java/' sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner

  pre_build:
    commands:
      # Verify environments
      - python --version
      - java -version
      
      # Run pylint (optional)
      - pylint $(find $CODEBUILD_SRC_DIR -name "*.py") --fail-under=6 || true
      
      # Extract SonarQube secrets
      - export LOGIN=$(echo "$SONAR_SECRET" | jq -r '.sonartoken')
      - export HOST=$(echo "$SONAR_SECRET" | jq -r '.HOST')
      - export Organization=$(echo "$SONAR_SECRET" | jq -r '.Organization')
      - export Project=$(echo "$SONAR_SECRET" | jq -r '.Project')
      
      # Debug output
      - echo "Using Java: $(which java)"
      - echo "Java version: $(java -version 2>&1 | head -1)"
      - echo "SonarScanner version: $(sonar-scanner --version)"

  build:
    commands:
      # Run SonarScanner analysis
      - sonar-scanner \
          -Dsonar.projectKey=$Project \
          -Dsonar.organization=$Organization \
          -Dsonar.sources=. \
          -Dsonar.host.url=$HOST \
          -Dsonar.login=$LOGIN
      
      # Check quality gate status
      - sleep 5
      - curl -s "$HOST/api/qualitygates/project_status?projectKey=$Project" > result.json
      - cat result.json
      - |
        if [ "$(jq -r '.projectStatus.status' result.json)" = "ERROR" ]; then
          echo "❌ Quality Gate failed"
          exit 1
        else
          echo "✅ Quality Gate passed"
        fi

artifacts:
  files:
    - '*/'